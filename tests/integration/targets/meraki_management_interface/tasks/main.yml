# Test code for the Meraki Management Interface module
# Copyright: (c) 2019, Kevin Breit (@kbreit)

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Block of tasks
  block:
  - name: Test an API key is provided
    ansible.builtin.fail:
      msg: Please define an API key
    when: auth_key is not defined

  - name: Set fact net_name
    ansible.builtin.set_fact:
      net_name: TestNet - Appliance

  - name: 'Create test network {{ net_name }}'
    cisco.meraki.meraki_network:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_name: '{{ net_name }}'
      type: appliance
    delegate_to: localhost
    register: net

  - name: Set fact net_id
    ansible.builtin.set_fact:
      net_id: '{{ net.data.id }}'

  - name: Test providing wan_enabled to an MS network
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ test_switch_net_name }}'
      serial: '{{ serial_switch }}'
      wan1:
        wan_enabled: enabled
        using_static_ip: false
    delegate_to: localhost
    register: ms_not_configured

  - name: Debug ms_not_configured
    ansible.builtin.debug:
      var: ms_not_configured

  - name: Assert ms_not_configured
    ansible.builtin.assert:
      that:
        - ms_not_configured.data is defined

  - name: Set management interface on switch
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ test_switch_net_name }}'
      serial: '{{ serial_switch }}'
      wan1:
        using_static_ip: false
        vlan: 3
    delegate_to: localhost
    register: set_switch_mgmt

  - name: Debug set_switch_mgmt
    ansible.builtin.debug:
      var: set_switch_mgmt

  - name: Assert set_switch_mgmt has been defined
    ansible.builtin.assert:
      that:
        - set_switch_mgmt.data is defined

  - name: Query non-MX network
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: query
      org_id: '{{ test_org_id }}'
      net_id: '{{ test_switch_net_name }}'
      serial: '{{ serial_switch }}'
    delegate_to: localhost
    register: non_mx_network

  - name: Debug non_mx_network
    ansible.builtin.debug:
      var: non_mx_network

  - name: Assert non_mx_network
    ansible.builtin.assert:
      that:
        - non_mx_network.data is defined

  - name: Reset management interface on switch
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ test_switch_net_name }}'
      serial: '{{ serial_switch }}'
      wan1:
        using_static_ip: false
        vlan: 1
    delegate_to: localhost
    register: reset_switch_mgmt

  - name: Debug reset_switch_mgmt
    ansible.builtin.debug:
      var: reset_switch_mgmt

  - name: Assert reset_switch_mgmt
    ansible.builtin.assert:
      that:
        - reset_switch_mgmt.data is defined

  - name: Set WAN1 as DHCP in check mode
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
      wan1:
        wan_enabled: enabled
        using_static_ip: false
        vlan: 1
    delegate_to: localhost
    register: set_wan1_check
    check_mode: true

  - name: Debug set_wan1_check
    ansible.builtin.debug:
      var: set_wan1_check

  - name: Assert set_wan1_check
    ansible.builtin.assert:
      that:
        - set_wan1_check is changed
        - set_wan1_check.data is defined

  - name: Set WAN1 as DHCP
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
      wan1:
        wan_enabled: enabled
        using_static_ip: false
        vlan: 1
    delegate_to: localhost
    register: set_wan1

  - name: Debug set_wan1
    ansible.builtin.debug:
      var: set_wan1

  - name: Assert set_wan1
    ansible.builtin.assert:
      that:
        - set_wan1 is changed
        - set_wan1.data is defined

  - name: Set WAN1 as DHCP with idempotency
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
      wan1:
        wan_enabled: enabled
        using_static_ip: false
        vlan: 1
    delegate_to: localhost
    register: set_wan1_idempotent

  - name: Debug set_wan1_idempotent
    ansible.builtin.debug:
      var: set_wan1_idempotent

  - name: Assert set_wan1_idempotent
    ansible.builtin.assert:
      that:
        - set_wan1_idempotent is not changed
        - set_wan1_idempotent.data is defined

  - name: Set WAN2 as static IP
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_name: '{{ test_org_name }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
      wan2:
        wan_enabled: enabled
        using_static_ip: true
        static_ip: 192.168.16.195
        static_gateway_ip: 192.168.16.1
        static_subnet_mask: 255.255.255.0
        static_dns:
          - 1.1.1.1
        vlan: 1
    delegate_to: localhost
    register: set_wan2

  - name: Debug set_wan2
    ansible.builtin.debug:
      var: set_wan2

  - name: Assert set_wan2
    ansible.builtin.assert:
      that:
        - set_wan2 is changed
        - set_wan2.data is defined

  - name: Test too many DNS servers
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: present
      org_id: '{{ test_org_id }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
      wan1:
        wan_enabled: enabled
        using_static_ip: true
        static_ip: 192.0.1.2
        static_gateway_ip: 192.0.1.1
        static_subnet_mask: 255.255.255.0
        static_dns:
          - 1.1.1.1
          - 8.8.8.8
          - 4.4.4.4
        vlan: 1
    delegate_to: localhost
    register: too_many_dns
    failed_when: false
    changed_when: false

  - name: Debug too_many_dns
    ansible.builtin.debug:
      var: too_many_dns

  - name: Assert too_many_dns
    ansible.builtin.assert:
      that:
        - 'too_many_dns.msg == "Maximum number of static DNS addresses is 2."'

  - name: Query management information
    cisco.meraki.meraki_management_interface:
      auth_key: '{{ auth_key }}'
      state: query
      org_name: '{{ test_org_name }}'
      net_id: '{{ net_id }}'
      serial: '{{ serial }}'
    delegate_to: localhost
    register: query_mx

  - name: Debug query_mx
    ansible.builtin.debug:
      var: query_mx

  - name: Assert query_mx
    ansible.builtin.assert:
      that:
        - query_mx.data is defined

  always:
  ############################################################################
  # Tear down starts here
  ############################################################################
    - name: Reset settings for all interfaces
      cisco.meraki.meraki_management_interface:
        auth_key: '{{ auth_key }}'
        state: present
        org_id: '{{ test_org_id }}'
        net_id: '{{ net_id }}'
        serial: '{{ serial }}'
        wan1:
          wan_enabled: disabled
          using_static_ip: false
        wan2:
          wan_enabled: enabled
          using_static_ip: false
      delegate_to: localhost
      failed_when: false
      changed_when: false

  # Network deletion is commented out since this requires a device in a network
  # - name: Delete network
  #   cisco.meraki.meraki_network:
  #     auth_key: '{{ auth_key }}'
  #     state: absent
  #     org_name: '{{ test_org_name }}'
  #     net_name: '{{ net_name }}'
  #   delegate_to: localhost
  #   register: delete_network
