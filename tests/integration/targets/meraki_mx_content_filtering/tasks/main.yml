# Test code for the Meraki Content Filteringmodule
# Copyright: (c) 2019, Kevin Breit (@kbreit)

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Block of tests
  block:
  - name: Test an API key is provided
    ansible.builtin.fail:
      msg: Please define an API key
    when: auth_key is not defined

  - name: Create network
    cisco.meraki.meraki_network:
      auth_key: '{{ auth_key }}'
      state: present
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      type: appliance
      timezone: America/Chicago
    delegate_to: localhost
    register: create_net_appliance

  - name: Test net_name and id exclusivity
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      net_id: 12345
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
    register: net_exclusive
    failed_when: false
    changed_when: false

  - name: Assert net_exclusive
    ansible.builtin.assert:
      that:
        - 'net_exclusive.msg == "net_name and net_id are mutually exclusive"'

  - name: Set blocked URL categories for idempotency test
    cisco.meraki.meraki_mx_content_filtering:
      state: present
      auth_key: "{{ auth_key }}"
      org_name: "{{ test_org_name }}"
      net_name: "{{ test_net_name }}"
      category_list_size: full list
      blocked_categories:
        - "Adult"
        - "Advertisements"
        - "Alcohol"
    delegate_to: localhost

  # - name: Set blocked URL categories with idempotency
  #   cisco.meraki.meraki_mx_content_filtering:
  #     state: present
  #     auth_key: "{{ auth_key }}"
  #     org_name: "{{ test_org_name }}"
  #     net_name: "{{ test_net_name }}"
  #     category_list_size: full list
  #     blocked_categories:
  #       - "Adult"
  #       - "Advertisements"
  #       - "Alcohol"
  #   delegate_to: localhost
  #   register: category_idempotent

  # - name: Assert category_idempotent
  #   ansible.builtin.assert:
  #     that:
  #       - category_idempotent is not changed
  #       - category_idempotent.data is defined

  - name: Set single allowed URL pattern with check mode
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
    register: single_allowed_check
    check_mode: true

  - name: Assert single_allowed_check
    ansible.builtin.assert:
      that:
        - single_allowed_check.data.allowed_url_patterns | length == 1
        - single_allowed_check is changed

  - name: Set single allowed URL pattern
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
    register: single_allowed

  - name: Assert single_allowed
    ansible.builtin.assert:
      that:
        - single_allowed.data.allowed_url_patterns | length == 1

  - name: Set single allowed URL pattern for idempotency with check mode
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
    register: single_allowed_idempotent_check
    check_mode: true

  - name: Debug single_allowed_idempotent_check
    ansible.builtin.debug:
      var: single_allowed_idempotent_check

  - name: Assert single_allowed and single_allowed_idempotent_check
    ansible.builtin.assert:
      that:
        - single_allowed_idempotent_check is not changed
        - single_allowed.data.allowed_url_patterns | length == 1

  - name: Set single allowed URL pattern for idempotency
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
    register: single_allowed_idempotent

  - name: Debug single_allowed_idempotent
    ansible.builtin.debug:
      var: single_allowed_idempotent

  - name: Assert single_allowed_idempotent
    ansible.builtin.assert:
      that:
        - single_allowed_idempotent.changed == False
        - single_allowed_idempotent.data is defined

  - name: Set single blocked URL pattern
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      blocked_urls:
        - "http://www.ansible.com/*"
    register: single_blocked

  - name: Debug single_blocked
    ansible.builtin.debug:
      var: single_blocked

  - name: Assert single_blocked
    ansible.builtin.assert:
      that:
        - single_blocked.data.blocked_url_patterns | length == 1

  - name: Set two allowed URL pattern
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      allowed_urls:
        - "http://www.ansible.com/*"
        - "http://www.redhat.com"
    register: two_allowed

  - name: Debug two_allowed
    ansible.builtin.debug:
      var: two_allowed

  - name: Debug two_allowed
    ansible.builtin.assert:
      that:
        - two_allowed.changed == True
        - two_allowed.data.allowed_url_patterns | length == 2

  - name: Set blocked URL category
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: present
      category_list_size: full list
      blocked_categories:
        - "Adult"
    register: blocked_category

  - name: Debug blocked_category
    ansible.builtin.debug:
      var: blocked_category

  - name: Assert blocked_category
    ansible.builtin.assert:
      that:
        - blocked_category.changed == True
        - blocked_category.data.blocked_url_categories | length == 1
        # - blocked_category.data.url_category_list_size == "fullList"

  # - name: Set blocked URL category with top sites
  #   cisco.meraki.meraki_mx_content_filtering:
  #     auth_key: '{{ auth_key }}'
  #     org_name: '{{ test_org_name }}'
  #     net_name: '{{ test_net_name }}'
  #     state: present
  #     category_list_size: top sites
  #     blocked_categories:
  #       - "Adult"
  #   register: blocked_category

  # - name: Debug blocked_category
  #   ansible.builtin.debug:
  #     var: blocked_category

  # - name: Assert blocked_category
  #   ansible.builtin.assert:
  #     that:
  #       - blocked_category.changed == True
  #       - blocked_category.data.blocked_url_categories | length == 1
  #       # - blocked_category.data.url_category_list_size == "topSites"

  - name: Query all content filtering information
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: query
    delegate_to: localhost
    register: query_all

  - name: Debug query_all
    ansible.builtin.debug:
      var: query_all

  - name: Query all content filtering assertion
    ansible.builtin.assert:
      that:
        - query_all.data.categories is defined
        - query_all.data.policy is defined

  - name: Query categories
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      state: query
      subset: categories
    delegate_to: localhost
    register: query_categories

  - name: Debug query_categories
    ansible.builtin.debug:
      var: query_categories

  - name: Query categories assertion
    ansible.builtin.assert:
      that:
        - query_categories.data is defined

  - name: Query content filtering policies
    cisco.meraki.meraki_mx_content_filtering:
      auth_key: '{{ auth_key }}'
      org_name: '{{ test_org_name }}'
      net_name: '{{ test_net_name }}'
      subset: policy
      state: query
    delegate_to: localhost
    register: query_policy

  - name: Debug query_policy
    ansible.builtin.debug:
      var: query_policy

  - name: Query contnet filtering policy assertion
    ansible.builtin.assert:
      that:
        - query_policy.data is defined

  always:
    - name: Reset policies
      cisco.meraki.meraki_mx_content_filtering:
        auth_key: '{{ auth_key }}'
        org_name: '{{ test_org_name }}'
        net_name: '{{ test_net_name }}'
        state: present
        category_list_size: full list
        allowed_urls:
          -
        blocked_urls:
          -
        blocked_categories:
          -

    - name: Delete network
      cisco.meraki.meraki_network:
        auth_key: '{{ auth_key }}'
        org_name: '{{ test_org_name }}'
        net_name: '{{ test_net_name }}'
        state: absent
